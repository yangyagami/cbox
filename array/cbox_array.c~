#include "cbox_array.h"

#include <memory.h>
#include <stdlib.h>
#include <errno.h>
#include <assert.h>

struct cbox_array {
	int element_size;
	void *buffer;
	int capacity;
	int size;
};

cbox_array_t *cbox_create_array(int size, int element_size) {
	cbox_array_t *array = NULL;
	array = calloc(1, sizeof(*array));
	assert(array);

	array->element_size = element_size;
	array->capacity = size;
	array->buffer = calloc(size, element_size);

	return array;
}

void cbox_destroy_array(cbox_array_t *array) {
	assert(array);

	free(array->buffer);
	free(array);
}

void *cbox_array_get_element(cbox_array_t *array, int index) {
	assert(array && array->buffer && index >= 0 && index < array->size);

	return &array->buffer[index * array->element_size];
}

void cbox_array_add(cbox_array_t *array, void *element) {
	assert(array);

	if (array->size >= array->capacity) {
		array->capacity *= 2;
		array->buffer = realloc(array->buffer,
					array->capacity * array->element_size);
	}

	memcpy(array->buffer + (array->size++), element,
		array->element_size);
}

void cbox_array_remove(cbox_array_t *array, void *element) {
	assert(array);
}


int cbox_get_array_size(cbox_array_t *array) {
	assert(array);
	return array->size;
}
